#!/usr/bin/python

# By Jesse Zbikowski for Flaming Lotus Girls
# Derived from webserver.py, Copyright Jon Berg , turtlemeat.com

import string,cgi,time
from os import curdir, sep
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

class MyHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        try:
            if self.path.endswith(".html"):
                self.contentType = 'text/html'
            elif self.path.endswith(".js"):
                self.contentType = 'text/javascript'
            elif self.path.endswith(".css"):
                self.contentType = 'text/css'
            elif self.path.endswith(".gif"):
                self.contentType = "application/gif"
            elif self.path.endswith(".png"):
                self.contentType = 'application/png'
            elif self.path.endswith("/services/channel"):
                print "Sending channel"
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write('{"result":true,"action":"\/soma\/services\/channel","channels":8}')
                return
            elif self.path.endswith("/services/pattern"):
                print "Sending patterns"
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write('{"result":true,"action":"\/soma\/services\/pattern","patterns":"pattern1\npattern2\npattern3\npattern4"}')
                return
            elif self.path.endswith("/services/rate"):
                print "Sending rate"
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write('{"result":true,"action":"\/soma\/services\/rate","rate":12000}')
                return
            elif self.path.endswith("/pattern"):
                self.pathlist = self.path.split("/")
                self.channel = self.pathlist[len(self.pathlist)-2]
                print "Sending pattern"
                self.send_response(200)
                self.end_headers()
                self.wfile.write('{"result":true,"action":"\/soma/\services\/channel\/' + self.channel + '/pattern","pattern":"pattern'+str(int(self.channel)+1)+'"}')
                return
            elif self.path.endswith("/state"):
                self.pathlist = self.path.split("/")
                self.channel = self.pathlist[len(self.pathlist)-2]
                print "Sending state"
                self.send_response(200)
                self.end_headers()
                self.wfile.write('{"result":true,"action":"\/soma/\services\/channel\/' + self.channel + '/state","state":"off"}')
                return
            else:
                self.send_response(404)
                return # don't hand back just anything

            f = open(curdir + sep + self.path) #self.path has /test.html
#note that this potentially makes every file on your computer readable by the internet

            self.send_response(200)
            self.send_header('Content-type', self.contentType)
            self.end_headers()
            self.wfile.write(f.read())
            f.close()
            return

        except IOError:
            self.send_error(404,'File Not Found: %s' % self.path)

def main():
    try:
        server = HTTPServer(('', 1337), MyHandler)
        print 'started httpserver...'
        server.serve_forever()
    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()

if __name__ == '__main__':
    main()

